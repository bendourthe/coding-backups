function varargout = GUI_MeshExplorer_export(varargin)
%GUI_MeshExplorer_export  Display a mesh interactively.
%wb20060310
%
%   Syntax:
%    handle = GUI_MeshExplorer_export(ax)
%
%   Input:
%    ax: Handle to the axes containing the objects to be displayed.
%
%   Output:
%    handle: Handle to the figure window created by GUI_MeshExplorer_export.
%
%   Effect: This function will copy the objects contained within ax to a
%   new window. The user can interactively manipulate the camera
%   orientation, distance and view angle using buttons displayed in the
%   window. Perspective can be switched on and off. It is also possible to
%   switch to a crossed-eye or a parallel-eye stereoscopic view. When
%   steroscopy is active, the intraocular distance coefficient (IDC) can be
%   changed. The distance between the two cameras is calculated as D/IDC,
%   D being the distance from one of the cameras to its target. The
%   following keys can be used:
%      - Up arrow:    Tilt mesh upward
%      - Down arrow:  Tilt mesh downward
%      - Left arrow:  Rotate mesh towards the left
%      - Right arrow: Rotate mesh towards the right
%      - 0:           Zoom out (increase view angle)
%      - 1:           Zoom in (decrease view angle)
%      - 4:           Walk out (increase camera distance)
%      - 7:           Walk in (decrease camera distance)
%      - Enter:       Reset camera distance and view angle
%      - Space:       Show or hide the control panel
%   As soon as the window is created, GUI_MeshExplorer_export exits and returns a
%   handle to the window. Use uiwait(handle) to suspend execution until the
%   window is closed.
%
%   Dependencies: GUI_MeshExplorer.fig
%
%   Known parents: none

%Created on 10/03/2006 by Ward Bartels with GUIDE v2.5.
%WB, 15/03/2006: Added fail-safes to prevent problems when non-numerical
%                text is entered into IDC or when the window is resized to
%                a height smaller than the control panel.
%Stabile, fully functional.



%----------------%
% Initialisation %
%----------------%


%Begin initialization code - DO NOT EDIT <gui_mainfcn>
gui_Singleton = 0;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GUI_MeshExplorer_export_OpeningFcn, ...
                   'gui_OutputFcn',  @GUI_MeshExplorer_export_OutputFcn, ...
                   'gui_LayoutFcn',  @GUI_MeshExplorer_export_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
%End initialization code - DO NOT EDIT



%Executed just before GUI_MeshExplorer_export is made visible
function GUI_MeshExplorer_export_OpeningFcn(hObject, eventdata, handles, varargin)
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GUI_MeshExplorer_export (see VARARGIN)

%Choose default command line output for GUI_MeshExplorer_export
handles.output = hObject;

%Get handle of original axes
if nargin>3
    ax_orig = varargin{1};
else
    error('GUI_MeshExplorer: Not enough input arguments.');
end

%Get handles to new axes
ax_new = [handles.Left_Axis; handles.Center_Axis; handles.Right_Axis];

%Copy data from original axes to new axes
obj_orig = get(ax_orig, 'Children');
copyobj(obj_orig, ax_new(1));
copyobj(obj_orig, ax_new(2));
copyobj(obj_orig, ax_new(3));

%Set objects on left and right axes invisible
set(get(ax_new(1), 'Children'), 'Visible', 'off');
set(get(ax_new(3), 'Children'), 'Visible', 'off');

%Set axes properties
axis(ax_new, 'tight');
set(ax_new, 'CameraPositionMode', 'auto', 'CameraTargetMode', 'auto', 'CameraUpVectorMode', 'auto', 'CameraViewAngleMode', 'auto');

%Copy camera orientation from original axes to new axes
[az, el] = view(ax_orig);
view(ax_new(2), [az el]);

%Save camera orientation
set(hObject, 'UserData', struct('az', az, 'el', el));

%Update handles structure
guidata(hObject, handles);



%Outputs from this function are returned to the command line
function varargout = GUI_MeshExplorer_export_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Get default command line output from handles structure
varargout{1} = handles.output;



%-----------%
% Callbacks %
%-----------%


%Callback, executed during object creation, after setting all properties
function IDC_CreateFcn(hObject, eventdata, handles)
%hObject    handle to IDC (see GCBO)
%eventdata  reserved - to be defined in a future version of MATLAB
%handles    empty - handles not created until after all CreateFcns called

%Set background to white
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%Callback, executed when the value in IDC is changed
function IDC_Callback(hObject, eventdata, handles)
% hObject    handle to IDC (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Use stereo callbacks <Stereo_Crossed_Callback>
%                     <Stereo_Parallel_Callback>
Stereo_Crossed_Callback(handles.Stereo_Crossed, eventdata, handles);
Stereo_Parallel_Callback(handles.Stereo_Parallel, eventdata, handles);



%Callback, executed on button press in Perspective
function Perspective_Callback(hObject, eventdata, handles)
% hObject    handle to Perspective (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Set projection
if get(hObject,'Value')
    for ax = [handles.Left_Axis handles.Center_Axis handles.Right_Axis]
        camproj(ax, 'perspective');
    end
else
    for ax = [handles.Left_Axis handles.Center_Axis handles.Right_Axis]
        camproj(ax, 'orthographic');
    end
end



%Callback, executed on button press in Up
function Up_Callback(hObject, eventdata, handles)
% hObject    handle to Up (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Decrease elevation for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    camorbit(ax, 0, -5);
end



%Callback, executed on button press in Down
function Down_Callback(hObject, eventdata, handles)
% hObject    handle to Down (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Increase elevation for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    camorbit(ax, 0, 5);
end



%Callback, executed on button press in Center
function Center_Callback(hObject, eventdata, handles)
% hObject    handle to Center (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Read saved state
st = get(handles.Window, 'UserData');

%Get handles of visible axes <VisibleAxes>
ax = VisibleAxes(handles);

%Distinguish between stereoscopic and non-stereoscopic
if length(ax)==1 %Non-stereo
    
    %Return camera orientation to saved state
    view(ax, [st.az st.el]);
    
else             %Stereo
    
    %Get azimuth and elevation of both axes (azimuth difference is needed)
    [az1, el1] = view(ax(1));
    [az2, el2] = view(ax(2));
    
    %Return camera orientation to saved state
    view(ax(1), [st.az st.el]);
    view(ax(2), [st.az+az2-az1 st.el]);
end

%Reset camera up vector
set(ax, 'CameraUpVectorMode', 'auto');



%Callback, executed on button press in Right
function Right_Callback(hObject, eventdata, handles)
% hObject    handle to Right (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Decrease azimuth for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    camorbit(ax, -5, 0);
end



%Callback, executed on button press in Left
function Left_Callback(hObject, eventdata, handles)
% hObject    handle to Left (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Increase azimuth for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    camorbit(ax, 5, 0);
end



%Callback, executed on button press in Zoom_In
function Zoom_In_Callback(hObject, eventdata, handles)
% hObject    handle to Zoom_In (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Zoom in visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    camzoom(ax, 1.1);
end



%Callback, executed on button press in Zoom_Reset
function Zoom_Reset_Callback(hObject, eventdata, handles)
% hObject    handle to Zoom_Reset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Reset zoom for visible axes <VisibleAxes>
set(VisibleAxes(handles), 'CameraViewAngleMode', 'auto');



%Callback, executed on button press in Zoom_Out
function Zoom_Out_Callback(hObject, eventdata, handles)
% hObject    handle to Zoom_Out (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Zoom out visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    camzoom(ax, 0.9);
end



%Callback, executed on button press in Walk_In
function Walk_In_Callback(hObject, eventdata, handles)
% hObject    handle to Walk_In (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Decrease walk distance for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    
    %Get camera position and target
    pos = campos(ax);
    tar = camtarget(ax);
    
    %Move camera closer
    campos(ax, tar+(pos-tar)*0.9);
end



%Callback, executed on button press in Walk_Reset
function Walk_Reset_Callback(hObject, eventdata, handles)
% hObject    handle to Walk_Reset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Reset walk distance for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    
    %Save camera orientation
    [az, el] = view(ax);
    
    %Reset camera position and up vector
    set(ax, 'CameraPositionMode', 'auto')
    set(ax, 'CameraUpVectorMode', 'auto');
    
    %Return camera orientation to saved state
    view(ax, [az el]);
end



%Callback, executed on button press in Walk_Out
function Walk_Out_Callback(hObject, eventdata, handles)
% hObject    handle to Walk_Out (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Increase walk distance for visible axes <VisibleAxes>
for ax = VisibleAxes(handles).'
    
    %Get camera position and target
    pos = campos(ax);
    tar = camtarget(ax);
    
    %Move camera further
    campos(ax, tar+(pos-tar)*1.1);
end



%Callback, executed on button press in Stereo_Off
function Stereo_Off_Callback(hObject, eventdata, handles)
% hObject    handle to Stereo_Off (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Only run the following if Stereo_Off is on
if get(hObject,'Value')
    
    %Get handle of first visible axes <VisibleAxes>
    ax = VisibleAxes(handles);
    ax = ax(1);
    
    %Get handles of left, right and center axes
    ax_left   = handles.Left_Axis;
    ax_center = handles.Center_Axis;
    ax_right  = handles.Right_Axis;
    
    %Copy camera orientation from ax to ax_right
    campos(ax_center, campos(ax));
    camtarget(ax_center, camtarget(ax));
    
    %Copy camera view angle from ax to ax_center
    mode  = camva(ax, 'mode');
    angle = camva(ax);
    camva(ax_center, angle);
    camva(ax_center, mode);
    
    %Set background color to white
    set(handles.Window, 'Color', [224 223 227]/255);
    
    %Set left and right axes invisible, and center axes visible
    set(ax_left, 'Visible', 'off');
    set(get(ax_left, 'Children'), 'Visible', 'off');
    set(ax_right, 'Visible', 'off');
    set(get(ax_right, 'Children'), 'Visible', 'off');
    set(ax_center, 'Visible', 'on');
    set(get(ax_center, 'Children'), 'Visible', 'on');
    
    %Reset camera up vector
    set(ax_center, 'CameraUpVectorMode', 'auto');
end



%Callback, executed on button press in Stereo_Crossed
function Stereo_Crossed_Callback(hObject, eventdata, handles)
% hObject    handle to Stereo_Crossed (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Get IDC
idc = str2double(get(handles.IDC, 'String'));

%Only run the following if Stereo_Crossed is on and idc is valid
if get(hObject,'Value') && ~isnan(idc)
    
    %Get handle of first visible axes <VisibleAxes>
    ax = VisibleAxes(handles);
    ax = ax(1);
    
    %Get handles of left, right and center axes
    ax_left   = handles.Left_Axis;
    ax_center = handles.Center_Axis;
    ax_right  = handles.Right_Axis;
    
    %Copy camera orientation from ax to ax_right
    campos(ax_right, campos(ax));
    camtarget(ax_right, camtarget(ax));
    
    %Copy camera view angle from ax to ax_left and ax_right
    mode  = camva(ax, 'mode');
    angle = camva(ax);
    camva(ax_left, angle);
    camva(ax_left, mode);
    camva(ax_right, angle);
    camva(ax_right, mode);
    
    %Separate cameras <Stereo>
    Stereo(ax_right, ax_left, idc);
    
    %Set background color to white
    set(handles.Window, 'Color', 'white');
    
    %Set left and right axes visible, and center axes invisible
    set(ax_center, 'Visible', 'off');
    set(get(ax_center, 'Children'), 'Visible', 'off');
    set(ax_left, 'Visible', 'on');
    set(get(ax_left, 'Children'), 'Visible', 'on');
    set(ax_right, 'Visible', 'on');
    set(get(ax_right, 'Children'), 'Visible', 'on');
end



%Callback, executed on button press in Stereo_Parallel
function Stereo_Parallel_Callback(hObject, eventdata, handles)
% hObject    handle to Stereo_Parallel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Get IDC
idc = str2double(get(handles.IDC, 'String'));

%Only run the following if Stereo_Parallel is on and idc is valid
if get(hObject,'Value') && ~isnan(idc)
    
    %Get handle of first visible axes <VisibleAxes>
    ax = VisibleAxes(handles);
    ax = ax(1);
    
    %Get handles of left, right and center axes
    ax_left   = handles.Left_Axis;
    ax_center = handles.Center_Axis;
    ax_right  = handles.Right_Axis;
    
    %Copy camera orientation from ax to ax_right
    campos(ax_left, campos(ax));
    camtarget(ax_left, camtarget(ax));
    
    %Copy camera view angle from ax to ax_left and ax_right
    mode  = camva(ax, 'mode');
    angle = camva(ax);
    camva(ax_left, angle);
    camva(ax_left, mode);
    camva(ax_right, angle);
    camva(ax_right, mode);
    
    %Separate cameras <Stereo>
    Stereo(ax_left, ax_right, idc);
    
    %Set background color to white
    set(handles.Window, 'Color', 'white');
    
    %Set left and right axes visible, and center axes invisible
    set(ax_center, 'Visible', 'off');
    set(get(ax_center, 'Children'), 'Visible', 'off');
    set(ax_left, 'Visible', 'on');
    set(get(ax_left, 'Children'), 'Visible', 'on');
    set(ax_right, 'Visible', 'on');
    set(get(ax_right, 'Children'), 'Visible', 'on');
end



%Callback, executed on key press over Window with no controls selected
function Window_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to Window (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Determine which key was pressed
switch get(hObject, 'CurrentCharacter')
    case char(30), %Up arrow - decrease elevation <Up_Callback>
        Up_Callback([], [], handles);
    case char(31), %Down arrow - increase elevation <Down_Callback>
        Down_Callback([], [], handles);
    case char(29), %Right arrow - decrease azimuth <Right_Callback>
        Right_Callback([], [], handles);
    case char(28), %Left arrow - increase azimuth <Left_Callback>
        Left_Callback([], [], handles);
    case '1'       %1 - zoom in <Zoom_In_Callback>
        Zoom_In_Callback([], [], handles);
    case '0'       %0 - zoom out <Zoom_Out_Callback>
        Zoom_Out_Callback([], [], handles);
    case char(13)  %Enter - reset zoom & walk <Zoom_Reset_Callback>
                   %                          <Walk_Reset_Callback>
        Zoom_Reset_Callback([], [], handles);
        Walk_Reset_Callback([], [], handles);
    case '7'       %7 - walk in <Walk_In_Callback>
        Walk_In_Callback([], [], handles);
    case '4'%      %4 - walk out <Walk_Out_Callback>
        Walk_Out_Callback([], [], handles);
    case ' '       %Space - show/hide panel <TogglePanel>
        TogglePanel(handles);
end



%Callback, executed on key press over Window with a control selected
function KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to Window (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Call Window's KeyPressFcn <Window_KeyPressFcn>
Window_KeyPressFcn(handles.Window, eventdata, handles);



%Callback, executed when Window is resized
function Window_ResizeFcn(hObject, eventdata, handles)
% hObject    handle to Window (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Get axes handles
ax = [handles.Left_Axis; handles.Center_Axis; handles.Right_Axis];

%Original position for Axis_Left, Axis_Center and Axis_Right (normalized)
positions = [get(ax(1), 'Position'); get(ax(2), 'OuterPosition'); get(ax(3), 'Position')];

%Get window height
pos = get(handles.Window, 'Position');
height = pos(4);

%Set y-location for Axis_Left, Axis_Center and Axis_Right (pixels)
y = [138; 129; 138];

%Fail-safe: return when height falls below y
if height<max(y), return; end

%Modify positions to comply
y_orig = positions(:,2);
positions(:,2) = y/height;
positions(:,4) = positions(:,4)+y_orig-positions(:,2);

%Set axes size
set(ax(1), 'Position', positions(1,:));
set(ax(2), 'OuterPosition', positions(2,:));
set(ax(3), 'Position', positions(3,:));



%-------------------%
% Utility functions %
%-------------------%


%Utility function, returns visible axes
function ax = VisibleAxes(handles)

%Get axes handles
ax = [handles.Left_Axis; handles.Center_Axis; handles.Right_Axis];

%Limit ax to axes currently visible
ax = ax(strcmp(get(ax, 'Visible'), 'on'));



%Utility function, toggles control panel visibility.
function TogglePanel(handles)

%Get handles controls and panels
h = [handles.Walk; get(handles.Walk, 'Children'); ...
     handles.Orientation; get(handles.Orientation, 'Children'); ...
     handles.Zoom; get(handles.Zoom, 'Children'); ...
     handles.Stereo; get(handles.Stereo, 'Children'); ...
     handles.Perspective; handles.Text; handles.IDC; handles.Backpanel];

%Get handles of panels only
h_p = [handles.Walk; handles.Orientation; handles.Zoom; handles.Stereo];

%Toggle visibility
if any(strcmp(get(h, 'Visible'), 'off'))
    set(h, 'Visible', 'on');
    set(h_p, 'BackgroundColor', 'default', 'ForegroundColor', 'default');
else
    set(h, 'Visible', 'off');
    color = get(handles.Window, 'Color');
    set(h_p, 'BackgroundColor', color, 'ForegroundColor', color);
end



%Utility function, separates the cameras
function Stereo(ax_lefteye, ax_righteye, idc)

%Get normalised camera position, camera up vector and target
aspect = get(ax_lefteye, 'DataAspectRatio');
pos = campos(ax_lefteye)./aspect;
tar = camtarget(ax_lefteye)./aspect;
upv = camup(ax_lefteye)./aspect;
d = sqrt(sum((pos-tar).^2));

%Calculate the position of the two cameras <unitv>
l = d/idc;
pos1 = pos+l/2*unitv(cross(pos-tar, upv));
pos2 = pos-l/2*unitv(cross(pos-tar, upv));

%Make sure camera doesn't "walk" after multiple switches
pos1 = tar+d*unitv(pos1-tar);
pos2 = tar+d*unitv(pos2-tar);

%Set up new positions
campos(ax_lefteye, pos1.*aspect);
campos(ax_righteye, pos2.*aspect);
camtarget(ax_lefteye, tar.*aspect);
camtarget(ax_righteye, tar.*aspect);

%Reset camera up vector
set([ax_lefteye; ax_righteye], 'CameraUpVectorMode', 'auto');



%Utility function, normalises the input
function u = unitv(v)

%Divide v by its norm
u = v/(sqrt(sum(v.^2)));



% %Original GUIDE help text (wb20060310), begin:
% 
% GUI_MESHEXPLORER_EXPORT M-file for GUI_MeshExplorer_export.fig
%      GUI_MESHEXPLORER_EXPORT, by itself, creates a new GUI_MESHEXPLORER_EXPORT.
%
%      H = GUI_MESHEXPLORER_EXPORT returns the handle to a new GUI_MESHEXPLORER_EXPORT or the handle to
%      the existing singleton*.
%
%      GUI_MESHEXPLORER_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_MESHEXPLORER_EXPORT.M with the given input arguments.
%
%      GUI_MESHEXPLORER_EXPORT('Property','Value',...) creates a new GUI_MESHEXPLORER_EXPORT or raises the
%      existing singleton*.  Starting from the left_axis, property value pairs are
%      applied to the GUI before GUI_MeshExplorer_export_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GUI_MeshExplorer_export_OpeningFcn via varargin.
%
% See also: GUIDE, GUIDATA, GUIHANDLES
% 
% %Original GUIDE help text (wb20060310), end.




% --- Creates and returns a handle to the GUI figure. 
function h1 = GUI_MeshExplorer_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'axes', 4, ...
    'uipanel', 10, ...
    'radiobutton', 9, ...
    'pushbutton', 27, ...
    'slider', 3, ...
    'edit', 2, ...
    'text', 2, ...
    'checkbox', 3, ...
    'togglebutton', 2), ...
    'override', 1, ...
    'release', 13, ...
    'resize', 'custom', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 0, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', 'E:\Data\Onderzoek\Matlab\3_wb\4 - User interface\GUI_MeshExplorer_export.m');
appdata.lastValidTag = 'Window';
appdata.GUIDELayoutEditor = [];

h1 = figure(...
'PaperUnits',get(0,'defaultfigurePaperUnits'),...
'Color',[0.87843137254902 0.874509803921569 0.890196078431373],...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'IntegerHandle','off',...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'KeyPressFcn','GUI_MeshExplorer_export(''Window_KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'MenuBar','none',...
'Name','Mesh Explorer',...
'NumberTitle','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',[20.98404194812 29.67743169791],...
'PaperType',get(0,'defaultfigurePaperType'),...
'Position',[520 327.000000000001 551 473],...
'ResizeFcn','GUI_MeshExplorer_export(''Window_ResizeFcn'',gcbo,[],guidata(gcbo))',...
'HandleVisibility','callback',...
'Tag','Window',...
'UserData',[],...
'Behavior',get(0,'defaultfigureBehavior'),...
'Visible','on',...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Center_Axis';

h2 = axes(...
'Parent',h1,...
'OuterPosition',[0 0.27061310782241 1 0.73],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'DataAspectRatio',get(0,'defaultaxesDataAspectRatio'),...
'DataAspectRatioMode','manual',...
'LooseInset',[0.13 0.11 0.0949999999999999 0.075],...
'XColor',get(0,'defaultaxesXColor'),...
'YColor',get(0,'defaultaxesYColor'),...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','Center_Axis',...
'UserData',[],...
'Behavior',get(0,'defaultaxesBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.49644128113879 1.02669039145907 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.49644128113879 -0.0836298932384341 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.101423487544484 0.49644128113879 1.00005459937205],...
'Rotation',90,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.51779359430605 1.08718861209964 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'Left_Axis';

h7 = axes(...
'Parent',h1,...
'Position',[0.02 0.289640591966173 0.46 0.69],...
'Box','on',...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'DataAspectRatio',get(0,'defaultaxesDataAspectRatio'),...
'DataAspectRatioMode','manual',...
'LooseInset',[0.151471471471472 0.11029810298103 0.110690690690691 0.0752032520325203],...
'XColor',get(0,'defaultaxesXColor'),...
'XTick',[],...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YTick',[],...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'ZTick',[],...
'ZTickMode','manual',...
'Tag','Left_Axis',...
'UserData',[],...
'Behavior',get(0,'defaultaxesBehavior'),...
'Visible','off',...
'CreateFcn', {@local_CreateFcn, '', appdata} );

h8 = get(h7,'title');

set(h8,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.49604743083004 1.02766798418972 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h9 = get(h7,'xlabel');

set(h9,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.49604743083004 -0.0316205533596841 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h10 = get(h7,'ylabel');

set(h10,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0296442687747034 0.498023715415019 1.00005459937205],...
'Rotation',90,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h11 = get(h7,'zlabel');

set(h11,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0454545454545453 1.17786561264822 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'Right_Axis';

h12 = axes(...
'Parent',h1,...
'Position',[0.52 0.289640591966173 0.46 0.69],...
'Box','on',...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'DataAspectRatio',get(0,'defaultaxesDataAspectRatio'),...
'DataAspectRatioMode','manual',...
'LooseInset',[0.187547053847577 0.146206030150754 0.137053616273229 0.0996859296482412],...
'XColor',get(0,'defaultaxesXColor'),...
'XTick',[],...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YTick',[],...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'ZTick',[],...
'ZTickMode','manual',...
'Tag','Right_Axis',...
'Behavior',get(0,'defaultaxesBehavior'),...
'Visible','off',...
'CreateFcn', {@local_CreateFcn, '', appdata} );

h13 = get(h12,'title');

set(h13,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 1.02766798418972 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h14 = get(h12,'xlabel');

set(h14,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.49604743083004 -0.0316205533596841 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h15 = get(h12,'ylabel');

set(h15,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0256916996047432 0.498023715415019 1.00005459937205],...
'Rotation',90,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

h16 = get(h12,'zlabel');

set(h16,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-1.13636363636364 1.17786561264822 1.00005459937205],...
'Rotation',0,...
'String','',...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey','',...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag','',...
'UserData',[],...
'Behavior',struct(),...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'IDC';

h17 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[1 1 1],...
'Callback','GUI_MeshExplorer_export(''IDC_Callback'',gcbo,[],guidata(gcbo))',...
'Position',[58.8 6 7.6 1.61538461538462],...
'String','40',...
'Style','edit',...
'CreateFcn', {@local_CreateFcn, 'GUI_MeshExplorer_export(''IDC_CreateFcn'',gcbo,[],guidata(gcbo))', appdata} ,...
'Tag','IDC',...
'Behavior',get(0,'defaultuicontrolBehavior'));

appdata = [];
appdata.lastValidTag = 'Text';

h18 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'HorizontalAlignment','right',...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[51.4 6.07692307692308 5.6 1.38461538461538],...
'String','IDC:',...
'Style','text',...
'Tag','Text',...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Perspective';

h19 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Perspective_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[51 2.92307692307692 15.6 1.15384615384615],...
'String','Perspective',...
'Style','checkbox',...
'Tag','Perspective',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Backpanel';

h20 = uipanel(...
'Parent',h1,...
'Units','pixels',...
'BorderType','beveledout',...
'Tag','Backpanel',...
'UserData',[],...
'Behavior',get(0,'defaultuipanelBehavior'),...
'Clipping','on',...
'Position',[3 4 436 123],...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Stereo';

h21 = uibuttongroup(...
'Parent',h1,...
'Units','characters',...
'Title','Stereoscopy',...
'TitlePosition','centertop',...
'Tag','Stereo',...
'Behavior',struct(),...
'Clipping','on',...
'Position',[69.2 0.692307692307692 16.2 8.30769230769231],...
'SelectedObject',[],...
'SelectionChangeFcn',[],...
'OldSelectedObject',[],...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Stereo_Crossed';

h22 = uicontrol(...
'Parent',h21,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Stereo_Crossed_Callback'',gcbo,[],guidata(gcbo))',...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.2 3 12.4 1.15384615384615],...
'String','Crossed',...
'Style','radiobutton',...
'Tag','Stereo_Crossed',...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Stereo_Off';

h23 = uicontrol(...
'Parent',h21,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Stereo_Off_Callback'',gcbo,[],guidata(gcbo))',...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.2 5.23076923076923 12.4 1.15384615384615],...
'String','Off',...
'Style','radiobutton',...
'Value',1,...
'Tag','Stereo_Off',...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Stereo_Parallel';

h24 = uicontrol(...
'Parent',h21,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Stereo_Parallel_Callback'',gcbo,[],guidata(gcbo))',...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.2 0.846153846153846 12.4 1.15384615384615],...
'String','Parallel',...
'Style','radiobutton',...
'Tag','Stereo_Parallel',...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Zoom';

h25 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Zoom',...
'TitlePosition','centertop',...
'Tag','Zoom',...
'Behavior',get(0,'defaultuipanelBehavior'),...
'Clipping','on',...
'Position',[25.8 0.846153846153846 9.2 8.15384615384616],...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Zoom_In';

h26 = uicontrol(...
'Parent',h25,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Zoom_In_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.8 4.76923076923077 4.8 1.92307692307692],...
'String','+',...
'Tag','Zoom_In',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Zoom_Out';

h27 = uicontrol(...
'Parent',h25,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Zoom_Out_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.8 0.615384615384607 4.8 1.84615384615385],...
'String','-',...
'Tag','Zoom_Out',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Zoom_Reset';

h28 = uicontrol(...
'Parent',h25,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Zoom_Reset_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.8 2.69230769230768 4.8 1.84615384615385],...
'String','O',...
'Tag','Zoom_Reset',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Orientation';

h29 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Orientation',...
'TitlePosition','centertop',...
'Tag','Orientation',...
'UserData',[],...
'Behavior',get(0,'defaultuipanelBehavior'),...
'Clipping','on',...
'Position',[2.6 0.846153846153846 19.6 8.15384615384616],...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Right';

h30 = uicontrol(...
'Parent',h29,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Right_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[12.4 2.69230769230768 4.8 1.84615384615385],...
'String','>',...
'Tag','Right',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Down';

h31 = uicontrol(...
'Parent',h29,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Down_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[7.2 0.615384615384599 4.8 1.84615384615385],...
'String','v',...
'Tag','Down',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Left';

h32 = uicontrol(...
'Parent',h29,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Left_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[2 2.69230769230768 4.8 1.84615384615385],...
'String','<',...
'Tag','Left',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Up';

h33 = uicontrol(...
'Parent',h29,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Up_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[7.2 4.76923076923077 4.8 1.84615384615385],...
'String','^',...
'Tag','Up',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Center';

h34 = uicontrol(...
'Parent',h29,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Center_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[7.2 2.69230769230768 4.8 1.84615384615385],...
'String','O',...
'Tag','Center',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Walk';

h35 = uipanel(...
'Parent',h1,...
'Units','characters',...
'Title','Walk',...
'TitlePosition','centertop',...
'Tag','Walk',...
'Behavior',get(0,'defaultuipanelBehavior'),...
'Clipping','on',...
'Position',[38.4 0.846153846153846 9.2 8.15384615384616],...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Walk_In';

h36 = uicontrol(...
'Parent',h35,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Walk_In_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.8 4.76923076923077 4.8 1.92307692307692],...
'String','+',...
'Tag','Walk_In',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Walk_Out';

h37 = uicontrol(...
'Parent',h35,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Walk_Out_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.8 0.615384615384607 4.8 1.84615384615385],...
'String','-',...
'Tag','Walk_Out',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );

appdata = [];
appdata.lastValidTag = 'Walk_Reset';

h38 = uicontrol(...
'Parent',h35,...
'Units','characters',...
'Callback','GUI_MeshExplorer_export(''Walk_Reset_Callback'',gcbo,[],guidata(gcbo))',...
'CData',[],...
'KeyPressFcn','GUI_MeshExplorer_export(''KeyPressFcn'',gcbo,[],guidata(gcbo))',...
'Position',[1.8 2.69230769230768 4.8 1.84615384615385],...
'String','O',...
'Tag','Walk_Reset',...
'UserData',[],...
'Behavior',get(0,'defaultuicontrolBehavior'),...
'CreateFcn', {@local_CreateFcn, '', appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   eval(createfcn);
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)


%   GUI_MAINFCN provides these command line APIs for dealing with GUIs
%
%      GUI_MESHEXPLORER_EXPORT, by itself, creates a new GUI_MESHEXPLORER_EXPORT or raises the existing
%      singleton*.
%
%      H = GUI_MESHEXPLORER_EXPORT returns the handle to a new GUI_MESHEXPLORER_EXPORT or the handle to
%      the existing singleton*.
%
%      GUI_MESHEXPLORER_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_MESHEXPLORER_EXPORT.M with the given input arguments.
%
%      GUI_MESHEXPLORER_EXPORT('Property','Value',...) creates a new GUI_MESHEXPLORER_EXPORT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before untitled_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to untitled_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".

%   Copyright 1984-2005 The MathWorks, Inc.
%   $Revision: 1.4.6.12 $ $Date: 2005/06/21 19:41:16 $

gui_StateFields =  {'gui_Name'
                    'gui_Singleton'
                    'gui_OpeningFcn'
                    'gui_OutputFcn'
                    'gui_LayoutFcn'
                    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error('Could not find field %s in the gui_State struct in GUI M-file %s', gui_StateFields{i}, gui_Mfile);        
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % GUI_MESHEXPLORER_EXPORT
    % create the GUI
    gui_Create = 1;
elseif isequal(ishandle(varargin{1}), 1) && ispc && iscom(varargin{1}) && isequal(varargin{1},gcbo)
    % GUI_MESHEXPLORER_EXPORT(ACTIVEX,...)    
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif ischar(varargin{1}) && numargin>1 && isequal(ishandle(varargin{2}), 1)
    % GUI_MESHEXPLORER_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = 0;
else
    % GUI_MESHEXPLORER_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = 1;
end

if gui_Create == 0
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else
        feval(varargin{:});
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.
    
    % Do feval on layout code in m-file if it exists
    if ~isempty(gui_State.gui_LayoutFcn)
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);
        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen')
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt);            
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt);            
        end
    end
    
    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    
    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig 
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end
    
    % If user specified 'Visible','off' in p/v pairs, don't make the figure
    % visible.
    gui_MakeVisible = 1;
    for ind=1:2:length(varargin)
        if length(varargin) == ind
            break;
        end
        len1 = min(length('visible'),length(varargin{ind}));
        len2 = min(length('off'),length(varargin{ind+1}));
        if ischar(varargin{ind}) && ischar(varargin{ind+1}) && ...
                strncmpi(varargin{ind},'visible',len1) && len2 > 1
            if strncmpi(varargin{ind+1},'off',len2)
                gui_MakeVisible = 0;
            elseif strncmpi(varargin{ind+1},'on',len2)
                gui_MakeVisible = 1;
            end
        end
    end
    
    % Check for figure param value pairs
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end
        try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end
    
    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});
    
    if ishandle(gui_hFigure)
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
        
        % Make figure visible
        if gui_MakeVisible
            set(gui_hFigure, 'Visible', 'on')
            if gui_Options.singleton 
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        rmappdata(gui_hFigure,'InGUIInitialization');
    end
    
    % If handle visibility is set to 'callback', turn it on until finished with
    % OutputFcn
    if ishandle(gui_hFigure)
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end
    
    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end
    
    if ishandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end    

function gui_hFigure = local_openfig(name, singleton)

% this application data is used to indicate the running mode of a GUIDE
% GUI to distinguish it from the design mode of the GUI in GUIDE.
setappdata(0,'OpenGuiWhenRunning',1);

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
try 
    gui_hFigure = openfig(name, singleton, 'auto');
catch
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = openfig(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
end
rmappdata(0,'OpenGuiWhenRunning');

