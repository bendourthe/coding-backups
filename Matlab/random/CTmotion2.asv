clear all; close all;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CONTROLEPANEEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dir = 'D:\2012\STLs\STL\';
data_available = 0;
    filename = 'RotTransData2.txt';
    file = [dir filename];
radius_axis_available = 1;
    filenameAX = 'RadAxes.txt';
    fileAX = [dir filenameAX];


% FILES

Rad_frag = 'Radius_part_1_260612.stl';
Rad = 'HR_Radius_Wrapped_260612.stl';
MC_frag = '4D CT Leuven serie3_slice1_MC1_surfaceRemesh.stl';
MC_frag_groter = '4D CT Leuven serie3_slice7_MC1.stl';
Trap1 = '4D CT Leuven serie3_slice1_Trapezium.stl';
Trap2 = '4D CT Leuven serie3_slice7_Trapezium.stl';


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Assenstelsel op radius:
%   oorsprong: in mediaal uitsteeksel ter hoogte van styloïden
%   y: richting tuberositas radii
%   z: richting radius styloid
%   x: loodrecht op vorige om een rechtsgeoriënteerd assenstelsel te vormen
if(radius_axis_available)
    A = txt2mat(fileAX);
    
    O = A(1,:);
    Y = A(2,:);
    Z = A(3,:);
else
    [ad_curve] = PlacePoints3({F_Rad}, {V_Rad}, {F_Rad}, {V_Rad}, 'Select origin, point on Y axis and point on Z axis (in that order!). End by pressing enter and exiting the figure');
    % Retrieving coördinates of the points:
    O = ad_curve.points{end,1}(1,:);
    Y = ad_curve.points{end,1}(2,:);
    Z = ad_curve.points{end,1}(3,:);
    
    fid = fopen(fileAX,'w+');
    fprintf(fid,'%5.8f\t%5.8f\t%5.8f\r\n',[O,Y,Z]);
    fclose(fid);
end

Origin = O;
Yaxis = (Y-O)/norm(Y-O);
Zaxis = (Z-O)/norm(Z-O);
Xaxis = cross(Yaxis,Zaxis)/norm(cross(Yaxis,Zaxis));

% Omzetten naar radius assenstelsel
RotMat = [Xaxis', Yaxis', Zaxis'];
T = [RotMat, Origin';
     0 0 0 1]; 
% Deze transformatiematrices zetten om van local naar global assenstelsel!!
% inverteren om van global naar local te gaan:
glob2loc = [RotMat', -(RotMat')*Origin'; 0 0 0 1];
R_glob2loc = glob2loc(1:3,1:3);
T_glob2loc = glob2loc(1:3,4);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Radiusfragment terugzoeken
if(data_available)
    A = txt2mat(file);
    
    [F_Rad_end_init, V_Rad_end_init] =  STL_ReadFile([dir Rad_frag],true);
    [F_Rad, V_Rad] =  STL_ReadFile([dir Rad],true);
    [F_MC_end_init, V_MC_end_init] =  STL_ReadFile([dir MC_frag]',true);
    [F_MC, V_MC] =  STL_ReadFile([dir MC_frag_groter],true);
    [F_Trap_init, V_Trap_init] =  STL_ReadFile([dir Trap1],true);
    [F_Trap, V_Trap] =  STL_ReadFile([dir Trap2],true);
    
    R_Rad = A(1:3,1:3);
    T_Rad = A(1:3,4);
    H_Rad = [R_Rad, T_Rad; 0 0 0 1];
    R_MC = A(4:6,1:3);
    T_MC = A(4:6,4);
    R_Trap = A(7:9,1:3);
    T_Trap = A(7:9,4);
    
else
    fid = fopen(file,'w+');
    % Radiusfragment registreren in grote CT scan

    stl_frag = [dir  Rad_frag];
    stl = [dir Rad];

    [R_Rad, T_Rad, F_Rad_end_init, V_Rad_end_init, F_Rad, V_Rad] = MatchBones6(stl_frag,stl,1,1);
    H_Rad = [R_Rad, T_Rad; 0 0 0 1];
    [F_MC_end_init, V_MC_end_init] =  STL_ReadFile([dir MC_frag]',true);
    [F_MC, V_MC] =  STL_ReadFile([dir MC_frag_groter],true);
    [F_Trap_init, V_Trap_init] =  STL_ReadFile([dir Trap1],true);
    [F_Trap, V_Trap] =  STL_ReadFile([dir Trap2],true);
    
    W = reshape([R_Rad, T_Rad].',1,[]);
    fprintf(fid,'%5.8f\t%5.8f\t%5.8f\t%5.8f\r\n',W);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Data transformeren naar lokaal assenstelsel

MC1 = (glob2loc * H_Rad * [V_MC_end_init.' ; ones(1,size(V_MC_end_init,1))]).';
MC1 = MC1(:,1:3);
MC2 = (glob2loc * H_Rad * [V_MC.' ; ones(1,size(V_MC,1))]).';
MC2 = MC2(:,1:3);
Trap1 = (glob2loc * H_Rad * [V_Trap_init.' ; ones(1,size(V_Trap_init,1))]).';
Trap1 = Trap1(:,1:3);
Trap2 = (glob2loc * H_Rad * [V_Trap.' ; ones(1,size(V_Trap,1))]).';
Trap2 = Trap2(:,1:3);
V_Rad = R_glob2loc*V_Rad.' + repmat(T_glob2loc,1,size(V_Rad,1)); V_Rad = V_Rad.';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ICP runnen (in lokaal assenstelsel dus)

if(~data_available)
    [R_MC, T_MC, F_MC_end_init, V_MC_end_init, F_MC, V_MC] = MatchBones6_FV(F_MC_end_init, MC1, F_MC, MC2,1,1,0);
    W = reshape([R_MC, T_MC].',1,[]);
    fprintf(fid,'%5.8f\t%5.8f\t%5.8f\t%5.8f\r\n',W);


    % transformatie van Trapezium berekenen

    [R_Trap, T_Trap, F_Trap_init, V_Trap_init, F_Trap, V_Trap] = MatchBones6_FV(F_Trap_init, Trap1, F_Trap, Trap2,0,1);
    
    W = reshape([R_Trap, T_Trap].',1,[]);
    fprintf(fid,'%5.8f\t%5.8f\t%5.8f\t%5.8f\r\n',W);


    fclose(fid);
end

%     h1 = figure;
%     [obj, li, ax] = GUI_PlotShells(h1, {F_MC_end_init;F_MC;F_Trap_init;F_Trap}, {MC1;MC2;Trap1;Trap2},...
%         {ones(size(MC1,1),1),ones(size(MC2,1),1),ones(size(Trap1,1),1),ones(size(Trap2,1),1)});



    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BEREKENEN SCREW AXIS

%MC
Hom_MC = [R_MC, T_MC; 0 0 0 1];
[n_MC,point_MC,phi_MC,t_MC] = screw(Hom_MC);

%Trapezium
Hom_Trap = [R_Trap, T_Trap; 0 0 0 1];
[n_Trap,point_Trap,phi_Trap,t_Trap] = screw(Hom_Trap);

% % test
% 
% h3 = figure;
% [obj, li, ax] = GUI_PlotShells(h3, {F_Trap_init;F_Trap}, {Trap1;Trap2},...
%         {ones(size(Trap1,1),1),ones(size(Trap2,1),1)});
% Trap1 = (Hom_Trap * [Trap1.' ; ones(1,size(Trap1,1))]).';
% Trap1 = Trap1(:,1:3);
% h2 = figure;
% [obj, li, ax] = GUI_PlotShells(h2, {F_Trap_init;F_Trap}, {Trap1;Trap2},...
%         {ones(size(Trap1,1),1),ones(size(Trap2,1),1)});
%     
%     
% MC1 = (Hom_MC * [MC1.' ; ones(1,size(MC1,1))]).';
% MC1 = MC1(:,1:3);
% h4 = figure;
% [obj, li, ax] = GUI_PlotShells(h4, {F_MC_end_init;F_MC}, {MC1;MC2},...
%         {ones(size(MC1,1),1),ones(size(MC2,1),1)});
